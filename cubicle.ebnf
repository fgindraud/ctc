# Template elements :
# * <str> -> iter on top-level elements of data
# * <int n> -> n-th template argument in the stack
# * <int n>.<str> -> str field of n-th argument in the stack ("value" can be used if iterable contains only simple values, not a dict)

# Template substitution: @ <template_element> @
# -> Used in a name to be substituted by the instance element value

# Template declaration: @ [<template_element> [, <template_element> [...]]] [ | <condition> ] @
# -> Used before duplicable constructs and expressions to replicate them with values picked from the input data
# -> The template elements must refer to iterable structures (map, list)
# -> Instance values will be organised as a stack, and template elements indexes will refer to them in order of declaration
# -> Nested templates declaration put their value on top of the stack
# Example: @T, R@ (&& @Z@ (&& @0@ = @1@_@2@)) -> 0 takes values of T, 1 of R, 2 of Z

# In expressions, supports template constructs:
# @<template decl>@ (&& <and of boolean expressions>)
# @<template decl>@ (|| <or of boolean expressions>)

# In type declaration :
# @<template decl>@ (| <enum names>)

# In transition body :
# @<template decl>@ (; <transition updates>)
# @<template decl>@ (| <switch case patterns>)

# All statements (but init) can use templates:
# <statement name> @<template_decl>@ <statement stuff>

model =
	[size_proc:size_proc]
	types:type_def_list
	decls:declaration_list
	init:init
	invariants:invariant_list
	unsafes:unsafe_list
	transitions:transition_list
	$
	;

# size procs
size_proc = 'number_procs' ~ @:int ;

# types
type_def_list = {type_def} ; 
type_def = 'type' ~ name:name ['=' ['|'] enum:type_enum_list] ;
type_enum_list = @+:type_enum {'|' ~ @+:type_enum} ;
type_enum = template:enum_template | name:template_name ;
enum_template = decl:template_decl '(' '|' ~ enum:type_enum_list ')' ;

# declarations
declaration_list = {decl} ;
decl = kind:('const' | 'var' | 'array') ~ [decl:template_decl] name:ref ':' typename:name ;

# init
init = 'init' ~ '(' procs:name_space_list ')' ~ '{' expr:or_expr '}' ;

# invariants
invariant_list = {invariant} ;
invariant = 'invariant' ~ [decl:template_decl] '(' procs:name_space_list ')' ~ '{' expr:or_expr '}' ;

# unsafe
unsafe_list = {unsafe}+ ;
unsafe = 'unsafe' ~ [decl:template_decl] '(' procs:name_space_list ')' ~ '{' expr:or_expr '}' ;

# transition
transition_list = {transition} ;
transition =
	'transition' ~ [decl:template_decl] name:template_name '(' procs:name_space_list ')' ~
	[require:transition_require]
	'{' ~ updates:transition_update_list '}'
	;
transition_require = 'requires' ~ '{' @:or_expr '}' ;
transition_update_list = {@+:transition_update ';'} [@+:transition_update [';']] ;
transition_update = template:update_template | assign:transition_assign ;
update_template = decl:template_decl '(' ';' ~ updates:transition_update_list ')' ;

transition_assign = lhs:ref ':=' ~ rhs:transition_rvalue ;
transition_rvalue = switch:switch_case | expr:expr | rand:('.' | '?') ;
switch_case = 'case' ~ @:case_list ;
case_list = {'|' ~ @+:case_elem}+ ;
case_elem = template:case_template | case:case ;
case_template = decl:template_decl '(' ~ case_list:case_list ')' ;
case = cond:('_' | and_expr) ':' ~ expr:expr ;

# expressions

or_expr = @+:or_elem {'||' ~ @+:or_elem} ;
or_elem = template:or_template | expr:and_expr ;
or_template = decl:template_decl '(' '||' ~ expr:and_expr ')' ;

and_expr = @+:and_elem {'&&' ~ @+:and_elem} ;
and_elem = template:and_template | expr:bool_expr | '(' ~ or_expr:or_expr ')' ;
and_template = decl:template_decl '(' '&&' ~ expr:and_expr ')' ;

bool_expr = forall:forall_expr | comp:comp_expr ;
forall_expr = 'forall_other' ~ proc:name '.' ~ (comp:comp_expr | '(' ~ expr:or_expr ')') ;
comp_expr = lhs:expr op:('=' | '<>' | '<=' | '<') ~ rhs:expr ;
expr = lhs:rvalue op:('+' | '-') ~ rhs:rvalue | val:rvalue ;
rvalue = const:const | ref:ref ;
const = int | bool ;

ref = array:array_ref | var:var_ref ;
array_ref = name:template_name '[' ~ index:array_index ']' ;
array_index = @+:template_name {',' ~ @+:template_name} ;
var_ref = name:template_name ;

# template
template_decl = '@' [args:template_list] ['|' ~ cond:or_expr] '@' ;
template_list = @+:template {',' ~ @+:template} ;
template_name = @+:/\w*/ {/@/ ~ @+:template '@' ~ @+:/\w*/} ; # explicit regexp to avoid whitespace in names
template = arg:name | field_ref:template_field_ref | key_ref:int ;
template_field_ref = key:int '.' ~ field:name ;

# lexical elements
name_space_list = {name} ;
name = /[A-Za-z][A-Za-z0-9_]*/ ; # Simplification ; no difference between lowercase / uppercase names
int = /[0-9]+/ ;
bool = 'True' | 'False' ;

