(* Use of templates *)

type msg = Msg_Empty | @Regions @ (| Msg_DataReq_@0@ | Msg_DataAns_@0@ | Msg_OwnReq_@0@ | Msg_OwnTrans_@0@ | Msg_InvReq_@0@ | Msg_InvAck_@0@)
type task_state = TS_Created | (*TS_Eligible |*) TS_Caching | TS_Running | TS_Publishing | TS_Finished

type valid_set_state = Valid | WaitingInvAck | Invalid

type data = D_Init | @Tasks @ (| D_@0@ )
(* Mode is unused, as all info is stored in the template system. It is kept as documentation of enum. *)
type mode = C (* create == RW without deps *) | RO | RW | NU

(* network, proc = node *)
array Sq[proc] : msg
array SqData[proc] : data
array SendTo[proc] : proc

array Rq[proc] : msg
array RqData[proc] : data
array RecvFrom[proc] : proc

(* proc = task *)
var @Tasks @ Task_@0@_State : task_state (* available globally FIXME *)
var @Tasks @ Task_@0@_Node : proc (* node of task *)

(* region data by node, proc = node *)
array @Regions @ Reg_@0@_Valid[proc] : bool (* has valid data *)
array @Regions @ Reg_@0@_Request[proc] : bool (* node sent a pending request *)
array @Regions @ Reg_@0@_Data[proc] : data (* local copy *)

		(* global structures, simplification over replication in the real case FIXME *)
var @Regions @ Reg_@0@_Owner : proc
array @Regions @ Reg_@0@_Vs[proc] : valid_set_state (* valid set ; never contains owner *)

init (node) {
	Sq[node] = Msg_Empty &&
	Rq[node] = Msg_Empty &&
	(* RecvFrom will be updated when msg arrive *)

	@Tasks @ (&& Task_@0@_State = TS_Created) &&
	(* Task node is left unspecified *)
	
	(* RegOwner unset *)
	@Regions @ (&&
		Reg_@0@_Valid[node] = False && 
		Reg_@0@_Request[node] = False &&
		Reg_@0@_Vs[node] = Invalid
	)
}

unsafe @Tasks @ (node) {
	@0.accesses | @1.mode@ = RW || @1.mode@ = RO @ (||
		(* Fail if one of the dep accesses doesn't read what it expects *)
		Task_@0@_State = TS_Running && Task_@0@_Node = node && Reg_@1@_Data[node] <> @1.read@
	)
}

(* Network usage
Place data in Sq (send queue), set target in SendTo
Not affected by init
*)
transition transmit_msg (from to)
	requires {
		Sq[from] <> Msg_Empty &&
		SendTo[from] = to && Rq[to] = Msg_Empty
	}
{
	Sq[from] := Msg_Empty;
	Rq[to] := Sq[from];
	RqData[to] := SqData[from];
	RecvFrom[to] := from;
}

(* Protocol handling *)

(*transition forward_Data_Req (n from) TODO distributed owner*)

transition @Regions @ r@0@_handle_Data_Req (node from)
	requires {
		Rq[node] = Msg_DataReq_@0@ && RecvFrom[node] = from &&
		Sq[node] = Msg_Empty
	}
{ 
	Rq[node] := Msg_Empty;

	Reg_@0@_Vs[from] := Valid;

	Sq[node] := Msg_DataAns_@0@;
	SqData[node] := Reg_@0@_Data[node];
	SendTo[node] := from;
}

transition @Regions @ r@0@_handle_Data_Ans (node from)
	requires {
		Rq[node] = Msg_DataAns_@0@ && RecvFrom[node] = from
	}
{
	Rq[node] := Msg_Empty;

	Reg_@0@_Valid[node] := True;
	Reg_@0@_Data[node] := RqData[node];
	Reg_@0@_Request[node] := False;
}

(*transition forward_Own_Req(n from to)*)

transition @Regions @ r@0@_handle_Owner_Req (node from)
	requires {
		Rq[node] = Msg_OwnReq_@0@ && RecvFrom[node] = from &&
		Sq[node] = Msg_Empty
	}
{ 
	Rq[node] := Msg_Empty;

	(* cannot remove ownership in two parts (only 1 global RegOwner pointer). Will be done in transfer *)

	Sq[node] := Msg_OwnTrans_@0@;
	SqData[node] := Reg_@0@_Data[node];
	SendTo[node] := from;
}

transition @Regions @ r@0@_handle_Owner_Transfer (node from)
	requires {
		Rq[node] = Msg_OwnTrans_@0@ && RecvFrom[node] = from
	}
{
	Rq[node] := Msg_Empty;

	Reg_@0@_Owner := node;
	Reg_@0@_Vs[i] := case
		| i = node : Invalid
		| i = from : Valid (* should be done in Msg_OwnReq when Owner is decoupled *)
		| _ : Reg_@0@_Vs[i];

	Reg_@0@_Valid[node] := True;
	Reg_@0@_Data[node] := RqData[node];
	Reg_@0@_Request[node] := False;

}

transition @Regions @ r@0@_handle_Inv_Req (node from)
	requires {
		Rq[node] = Msg_InvReq_@0@ && RecvFrom[node] = from &&
		Sq[node] = Msg_Empty
	}
{
	Rq[node] := Msg_Empty;

	Reg_@0@_Valid[node] := False;
		
	Sq[node] := Msg_InvAck_@0@;
	SendTo[node] := from;
}

transition @Regions @ r@0@_handle_Inv_Ack (node from)
	requires {
		Rq[node] = Msg_InvAck_@0@ && RecvFrom[node] = from
	}
{
	Rq[node] := Msg_Empty;
	
	Reg_@0@_Vs[from] := Invalid;
}

(* Task State transitions *)

transition @Tasks @ t@0@_becomes_eligible_starts_caching (node) 
	requires {
		Task_@0@_State = TS_Created && Task_@0@_Node = node &&
		@0.dep@ (&& Task_@1@_State = TS_Finished)
	}
{
	Task_@0@_State := TS_Caching;
}

transition @Tasks, 0.accesses | @1.mode@ = RO @ t@0@_r@1@_trigger_data_req (node)
	requires {
		Task_@0@_State = TS_Caching && Task_@0@_Node = node &&
		Reg_@1@_Valid[node] = False && Reg_@1@_Request[node] = False &&
		Sq[node] = Msg_Empty
	}
{
	Reg_@1@_Request[node] := True;

	Sq[node] := Msg_DataReq_@1@;
	SendTo[node] := Reg_@1@_Owner;
}

transition @Tasks, 0.accesses | @1.mode@ = RW @ t@0@_r@1@_trigger_own_req (node)
	requires {
		Task_@0@_State = TS_Caching && Task_@0@_Node = node &&
		Reg_@1@_Owner <> node && Reg_@1@_Request[node] = False &&
		Sq[node] = Msg_Empty
	}
{
	Reg_@1@_Request[node] := True;

	Sq[node] := Msg_OwnReq_@1@;
	SendTo[node] := Reg_@1@_Owner;
}

(* start to run *)
transition @Tasks @ t@0@_starts_running (node)
	requires {
		Task_@0@_State = TS_Caching && Task_@0@_Node = node &&
		(* Do not wait for C *)
		@0.accesses | @1.mode@ = RW @ (&& node = Reg_@1@_Owner) &&
		@0.accesses | @1.mode@ = RO @ (&& Reg_@1@_Valid[node] = True)
	}
{
	Task_@0@_State := TS_Running;
}

(* stop running *)
transition @Tasks @ t@0@_stop_running (node)
	requires {
		Task_@0@_State = TS_Running && Task_@0@_Node = node
	}
{
	@0.accesses | @1.mode@ = RW @ (; Reg_@1@_Data[node] := D_@0@);
	@0.accesses | @1.mode@ = C @ (;
		Reg_@1@_Data[node] := D_@0@;
		Reg_@1@_Valid[node] := True;
		Reg_@1@_Owner := node
	);
	Task_@0@_State := TS_Publishing;
}

transition @Tasks, 0.accesses | @1.mode@ = RW @ t@0@_r@1@_trigger_inv_req (node remote)
	requires {
		Task_@0@_State = TS_Publishing && Task_@0@_Node = node &&
		Reg_@1@_Vs[remote] = Valid &&
		Sq[node] = Msg_Empty
	}
{
	Reg_@1@_Vs[remote] := WaitingInvAck;

	Sq[node] := Msg_InvReq_@1@;
	SendTo[node] := remote;
}

transition @Tasks @ t@0@_publishing_complete (node)
	requires {
		Task_@0@_State = TS_Publishing && Task_@0@_Node = node &&
		@0.accesses | @1.mode@ = RW @ (&& forall_other m. (Reg_@1@_Vs[m] = Invalid))
	}
{
	Task_@0@_State := TS_Finished;
}

